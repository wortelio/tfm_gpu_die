Mobilenetv2_Mini_Resnet_24 Classifier.
	One Head.
	Weighted for Precision.
	Brevitas Default.
	Dataset images divided by 255.


Datasets Length
	Train and Val: 128

Load Model: False
Width Mult: 1.0

Device: cuda
Optimizer:
	Learning Rate: 0.001
	Weight Decay: 0.001
Scheduler:
	Scheduler factor: 0.8
	Scheduler patience: 2
	Scheduler threshold: 0.001
	Scheduler min learning rate: 1e-06

Batch Size: 128
Num Workers: 8
Pin Memory: True
Epochs: 8

IMG DIMS:
	Width: 224
	Height: 224

Brevitas Config:
	Fixed Point: True
	Weights Bit Width: 4
	Big Layers Weights Bit Width: 4
	Bias Bit Width: 4
	Activations Bit Width: 4

********* Datasets Length *********
Train Dataset Length: 640
Test Dataset Length: 384

Trainable parameters = 68498
Total parameters = 68498


Torch Summary
==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
MobileNetV2_MINI_RESNET_SPARSE           [1, 2]                    --
├─Sequential: 1-1                        [1, 64, 14, 14]           --
│    └─Sequential: 2-1                   [1, 24, 112, 112]         --
│    │    └─Conv2d: 3-1                  [1, 24, 112, 112]         648
│    │    └─BatchNorm2d: 3-2             [1, 24, 112, 112]         48
│    │    └─ReLU: 3-3                    [1, 24, 112, 112]         --
│    └─InvertedBlock: 2-2                [1, 8, 112, 112]          --
│    │    └─Sequential: 3-4              [1, 8, 112, 112]          472
│    └─InvertedBlock: 2-3                [1, 16, 56, 56]           --
│    │    └─Sequential: 3-5              [1, 16, 56, 56]           624
│    └─InvertedBlock: 2-4                [1, 16, 56, 56]           --
│    │    └─Sequential: 3-6              [1, 16, 56, 56]           1,472
│    └─InvertedBlock: 2-5                [1, 24, 28, 28]           --
│    │    └─Sequential: 3-7              [1, 24, 28, 28]           1,744
│    └─InvertedBlock: 2-6                [1, 24, 28, 28]           --
│    │    └─Sequential: 3-8              [1, 24, 28, 28]           2,976
│    └─InvertedBlock: 2-7                [1, 32, 14, 14]           --
│    │    └─Sequential: 3-9              [1, 32, 14, 14]           6,688
│    └─InvertedBlock: 2-8                [1, 32, 14, 14]           --
│    │    └─Sequential: 3-10             [1, 32, 14, 14]           9,920
│    └─InvertedBlock: 2-9                [1, 32, 14, 14]           --
│    │    └─Sequential: 3-11             [1, 32, 14, 14]           9,920
│    └─InvertedBlock: 2-10               [1, 64, 14, 14]           --
│    │    └─Sequential: 3-12             [1, 64, 14, 14]           7,104
│    └─InvertedBlock: 2-11               [1, 64, 14, 14]           --
│    │    └─Sequential: 3-13             [1, 64, 14, 14]           18,176
├─Sequential: 1-2                        [1, 128, 14, 14]          --
│    └─Conv2d: 2-12                      [1, 128, 14, 14]          8,192
│    └─BatchNorm2d: 2-13                 [1, 128, 14, 14]          256
│    └─ReLU: 2-14                        [1, 128, 14, 14]          --
├─AdaptiveAvgPool2d: 1-3                 [1, 128, 1, 1]            --
├─Linear: 1-4                            [1, 2]                    258
==========================================================================================
Total params: 68,498
Trainable params: 68,498
Non-trainable params: 0
Total mult-adds (M): 37.40
==========================================================================================
Input size (MB): 0.60
Forward/backward pass size (MB): 29.30
Params size (MB): 0.27
Estimated Total Size (MB): 30.18
==========================================================================================

Torch Model
MobileNetV2_MINI_RESNET_SPARSE(
  (features): Sequential(
    (0): Sequential(
      (0): Conv2d(3, 24, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): InvertedBlock(
      (conv): Sequential(
        (0): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=24, bias=False)
        (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(24, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): InvertedBlock(
      (conv): Sequential(
        (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
        (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): InvertedBlock(
      (conv): Sequential(
        (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
        (6): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): InvertedBlock(
      (conv): Sequential(
        (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
        (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
        (6): Conv2d(32, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): InvertedBlock(
      (conv): Sequential(
        (0): Conv2d(24, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48, bias=False)
        (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
        (6): Conv2d(48, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): InvertedBlock(
      (conv): Sequential(
        (0): Conv2d(24, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)
        (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
        (6): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): InvertedBlock(
      (conv): Sequential(
        (0): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
        (6): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): InvertedBlock(
      (conv): Sequential(
        (0): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
        (6): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): InvertedBlock(
      (conv): Sequential(
        (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
        (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): InvertedBlock(
      (conv): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
        (6): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (conv): Sequential(
    (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (classifier): Linear(in_features=128, out_features=2, bias=True)
)

Loss Function: BCE
Smoke Precision Weight: 0.8
Starting script


***Start Training: 01:18:36


=== EPOCH 0/7 ===
Learning Rate = 0.001

TRAIN Stats
Total Loss |Smoke Loss|Fire Loss |    _______|Accuracy |Precision|Recall   |F1       |
-----------|----------|----------|    Smoke  |0.4969   |0.4646   |0.1885   |0.2682   |
167.11     |79.57     |87.54     |    Fire   |0.5500   |0.3085   |0.2938   |0.3010   |

VAL Stats
Total Loss |Smoke Loss|Fire Loss |    _______|Accuracy |Precision|Recall   |F1       |
-----------|----------|----------|    Smoke  |0.5104   |0.0000   |0.0000   |0.0000   |
166.63     |79.57     |87.06     |    Fire   |0.6979   |0.0000   |0.0000   |0.0000   |

Saving model with new best validation loss: 166.6266

=== EPOCH 1/7 ===
Learning Rate = 0.001

TRAIN Stats
Total Loss |Smoke Loss|Fire Loss |    _______|Accuracy |Precision|Recall   |F1       |
-----------|----------|----------|    Smoke  |0.5109   |0.0000   |0.0000   |0.0000   |
159.60     |77.92     |81.68     |    Fire   |0.6703   |0.0000   |0.0000   |0.0000   |

VAL Stats
Total Loss |Smoke Loss|Fire Loss |    _______|Accuracy |Precision|Recall   |F1       |
-----------|----------|----------|    Smoke  |0.5104   |0.0000   |0.0000   |0.0000   |
164.46     |79.38     |85.08     |    Fire   |0.6979   |0.0000   |0.0000   |0.0000   |

Saving model with new best validation loss: 164.4582

=== EPOCH 2/7 ===
Learning Rate = 0.001

TRAIN Stats
Total Loss |Smoke Loss|Fire Loss |    _______|Accuracy |Precision|Recall   |F1       |
-----------|----------|----------|    Smoke  |0.5109   |0.0000   |0.0000   |0.0000   |
151.74     |76.47     |75.27     |    Fire   |0.6703   |0.0000   |0.0000   |0.0000   |

VAL Stats
Total Loss |Smoke Loss|Fire Loss |    _______|Accuracy |Precision|Recall   |F1       |
-----------|----------|----------|    Smoke  |0.5104   |0.0000   |0.0000   |0.0000   |
163.78     |79.50     |84.28     |    Fire   |0.6979   |0.0000   |0.0000   |0.0000   |

Saving model with new best validation loss: 163.7830

=== EPOCH 3/7 ===
Learning Rate = 0.001

TRAIN Stats
Total Loss |Smoke Loss|Fire Loss |    _______|Accuracy |Precision|Recall   |F1       |
-----------|----------|----------|    Smoke  |0.5109   |0.5000   |0.0032   |0.0063   |
146.92     |76.28     |70.64     |    Fire   |0.6703   |0.0000   |0.0000   |0.0000   |

VAL Stats
Total Loss |Smoke Loss|Fire Loss |    _______|Accuracy |Precision|Recall   |F1       |
-----------|----------|----------|    Smoke  |0.4896   |0.4896   |1.0000   |0.6573   |
165.13     |80.04     |85.09     |    Fire   |0.6979   |0.0000   |0.0000   |0.0000   |

Saving model with best Mean F1: 0.3287

=== EPOCH 4/7 ===
Learning Rate = 0.001

TRAIN Stats
Total Loss |Smoke Loss|Fire Loss |    _______|Accuracy |Precision|Recall   |F1       |
-----------|----------|----------|    Smoke  |0.5719   |0.6970   |0.2204   |0.3350   |
140.90     |74.81     |66.10     |    Fire   |0.6703   |0.0000   |0.0000   |0.0000   |

VAL Stats
Total Loss |Smoke Loss|Fire Loss |    _______|Accuracy |Precision|Recall   |F1       |
-----------|----------|----------|    Smoke  |0.4896   |0.4896   |1.0000   |0.6573   |
167.70     |80.84     |86.86     |    Fire   |0.6979   |0.0000   |0.0000   |0.0000   |


=== EPOCH 5/7 ===
Learning Rate = 0.001

TRAIN Stats
Total Loss |Smoke Loss|Fire Loss |    _______|Accuracy |Precision|Recall   |F1       |
-----------|----------|----------|    Smoke  |0.5953   |0.6534   |0.3674   |0.4703   |
136.84     |73.79     |63.05     |    Fire   |0.7094   |0.9032   |0.1327   |0.2314   |

VAL Stats
Total Loss |Smoke Loss|Fire Loss |    _______|Accuracy |Precision|Recall   |F1       |
-----------|----------|----------|    Smoke  |0.4896   |0.4896   |1.0000   |0.6573   |
169.91     |81.46     |88.45     |    Fire   |0.6979   |0.0000   |0.0000   |0.0000   |


=== EPOCH 6/7 ===
Learning Rate = 0.0008

TRAIN Stats
Total Loss |Smoke Loss|Fire Loss |    _______|Accuracy |Precision|Recall   |F1       |
-----------|----------|----------|    Smoke  |0.5969   |0.6291   |0.4281   |0.5095   |
134.81     |73.43     |61.37     |    Fire   |0.7594   |0.8276   |0.3412   |0.4832   |

VAL Stats
Total Loss |Smoke Loss|Fire Loss |    _______|Accuracy |Precision|Recall   |F1       |
-----------|----------|----------|    Smoke  |0.4896   |0.4896   |1.0000   |0.6573   |
171.73     |81.94     |89.79     |    Fire   |0.3021   |0.3021   |1.0000   |0.4640   |

Saving model with best Mean F1: 0.5607

=== EPOCH 7/7 ===
Learning Rate = 0.0008

TRAIN Stats
Total Loss |Smoke Loss|Fire Loss |    _______|Accuracy |Precision|Recall   |F1       |
-----------|----------|----------|    Smoke  |0.5922   |0.6111   |0.4569   |0.5229   |
133.19     |72.96     |60.23     |    Fire   |0.7875   |0.8261   |0.4502   |0.5828   |

VAL Stats
Total Loss |Smoke Loss|Fire Loss |    _______|Accuracy |Precision|Recall   |F1       |
-----------|----------|----------|    Smoke  |0.4896   |0.4896   |1.0000   |0.6573   |
173.48     |82.55     |90.94     |    Fire   |0.3073   |0.3037   |1.0000   |0.4659   |

Saving model with best Mean F1: 0.5616
Saving last model

***Script finished: 01:19:23

Time elapsed: 0:00:46.375343

Testing with FULL TEST LOADER
{'Accuracy': [0.4895833432674408, 0.3072916567325592], 'Precision': [0.4895833432674408, 0.3036649227142334], 'Recall': [1.0, 1.0], 'F1': [0.6573426723480225, 0.4658634662628174]}

Testing with DFire MINI TRAIN after LOADING F1 Best Mean CHECKPOINT
{'Accuracy': [0.75, 0.3700000047683716], 'Precision': [0.75, 0.3571428656578064], 'Recall': [1.0, 1.0], 'F1': [0.8571428656578064, 0.5263158082962036]}

Testing with DFire MINI TEST after LOADING F1 Best Mean CHECKPOINT
{'Accuracy': [0.7333333492279053, 0.36666667461395264], 'Precision': [0.7333333492279053, 0.36666667461395264], 'Recall': [1.0, 1.0], 'F1': [0.8461538553237915, 0.5365853905677795]}
